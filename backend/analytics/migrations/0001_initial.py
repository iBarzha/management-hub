# Generated by Django 5.2.4 on 2025-08-02 14:10

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('projects', '0003_sprint'),
        ('tasks', '0004_taskattachment_taskcomment'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_tasks', models.IntegerField(default=0)),
                ('completed_tasks', models.IntegerField(default=0)),
                ('in_progress_tasks', models.IntegerField(default=0)),
                ('todo_tasks', models.IntegerField(default=0)),
                ('blocked_tasks', models.IntegerField(default=0)),
                ('completion_percentage', models.FloatField(default=0.0)),
                ('average_task_completion_time', models.FloatField(default=0.0)),
                ('estimated_completion_date', models.DateTimeField(blank=True, null=True)),
                ('current_velocity', models.FloatField(default=0.0)),
                ('average_velocity', models.FloatField(default=0.0)),
                ('overdue_tasks', models.IntegerField(default=0)),
                ('tasks_completed_on_time', models.IntegerField(default=0)),
                ('on_time_completion_rate', models.FloatField(default=0.0)),
                ('active_team_members', models.IntegerField(default=0)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='projects.project')),
            ],
            options={
                'db_table': 'project_metrics',
            },
        ),
        migrations.CreateModel(
            name='ReportGeneration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_type', models.CharField(choices=[('project_summary', 'Project Summary'), ('team_performance', 'Team Performance'), ('sprint_report', 'Sprint Report'), ('velocity_report', 'Velocity Report'), ('burndown_report', 'Burndown Report'), ('custom', 'Custom Report')], max_length=20)),
                ('export_format', models.CharField(choices=[('pdf', 'PDF'), ('csv', 'CSV'), ('excel', 'Excel'), ('json', 'JSON')], max_length=10)),
                ('date_from', models.DateTimeField()),
                ('date_to', models.DateTimeField()),
                ('filters', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=15)),
                ('file_path', models.CharField(blank=True, max_length=500)),
                ('file_size', models.BigIntegerField(default=0)),
                ('generation_time', models.FloatField(default=0.0)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generated_reports', to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'report_generations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SprintMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sprint_name', models.CharField(max_length=200)),
                ('sprint_number', models.IntegerField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('planned_tasks', models.IntegerField(default=0)),
                ('planned_story_points', models.FloatField(default=0.0)),
                ('completed_tasks', models.IntegerField(default=0)),
                ('completed_story_points', models.FloatField(default=0.0)),
                ('velocity', models.FloatField(default=0.0)),
                ('burndown_data', models.JSONField(default=list)),
                ('sprint_goal_achieved', models.BooleanField(default=False)),
                ('retrospective_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sprint_metrics', to='projects.project')),
            ],
            options={
                'db_table': 'sprint_metrics',
                'ordering': ['-sprint_number'],
                'unique_together': {('project', 'sprint_number')},
            },
        ),
        migrations.CreateModel(
            name='TaskMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estimated_hours', models.FloatField(default=0.0)),
                ('actual_hours', models.FloatField(default=0.0)),
                ('time_to_completion', models.FloatField(default=0.0)),
                ('status_changes', models.JSONField(default=list)),
                ('assignment_changes', models.JSONField(default=list)),
                ('story_points', models.FloatField(default=0.0)),
                ('complexity_score', models.IntegerField(choices=[(1, 'Very Low'), (2, 'Low'), (3, 'Medium'), (4, 'High'), (5, 'Very High')], default=1)),
                ('reopened_count', models.IntegerField(default=0)),
                ('blocked_time', models.FloatField(default=0.0)),
                ('is_overdue', models.BooleanField(default=False)),
                ('completed_on_time', models.BooleanField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('task', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metrics', to='tasks.task')),
            ],
            options={
                'db_table': 'task_metrics',
            },
        ),
        migrations.CreateModel(
            name='AnalyticsSnapshot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snapshot_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], max_length=10)),
                ('snapshot_date', models.DateTimeField()),
                ('metrics_data', models.JSONField(default=dict)),
                ('total_tasks', models.IntegerField(default=0)),
                ('completed_tasks', models.IntegerField(default=0)),
                ('completion_percentage', models.FloatField(default=0.0)),
                ('velocity', models.FloatField(default=0.0)),
                ('team_size', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics_snapshots', to='projects.project')),
            ],
            options={
                'db_table': 'analytics_snapshots',
                'ordering': ['-snapshot_date'],
                'unique_together': {('project', 'snapshot_type', 'snapshot_date')},
            },
        ),
        migrations.CreateModel(
            name='BurndownData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('remaining_tasks', models.IntegerField(default=0)),
                ('remaining_story_points', models.FloatField(default=0.0)),
                ('ideal_remaining_tasks', models.FloatField(default=0.0)),
                ('ideal_remaining_points', models.FloatField(default=0.0)),
                ('tasks_completed_today', models.IntegerField(default=0)),
                ('story_points_completed_today', models.FloatField(default=0.0)),
                ('team_capacity', models.FloatField(default=0.0)),
                ('team_utilization', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='burndown_data', to='projects.project')),
                ('sprint_metrics', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='daily_burndown', to='analytics.sprintmetrics')),
            ],
            options={
                'db_table': 'burndown_data',
                'ordering': ['date'],
                'unique_together': {('project', 'date')},
            },
        ),
        migrations.CreateModel(
            name='TeamMemberMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tasks_assigned', models.IntegerField(default=0)),
                ('tasks_completed', models.IntegerField(default=0)),
                ('tasks_in_progress', models.IntegerField(default=0)),
                ('average_completion_time', models.FloatField(default=0.0)),
                ('completion_rate', models.FloatField(default=0.0)),
                ('tasks_completed_on_time', models.IntegerField(default=0)),
                ('on_time_rate', models.FloatField(default=0.0)),
                ('story_points_completed', models.FloatField(default=0.0)),
                ('average_velocity', models.FloatField(default=0.0)),
                ('comments_made', models.IntegerField(default=0)),
                ('tasks_reviewed', models.IntegerField(default=0)),
                ('total_time_logged', models.FloatField(default=0.0)),
                ('last_activity', models.DateTimeField(blank=True, null=True)),
                ('active_days_count', models.IntegerField(default=0)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_metrics', to='projects.project')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'team_member_metrics',
                'unique_together': {('user', 'project', 'period_start')},
            },
        ),
    ]
